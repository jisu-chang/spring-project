<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    <mapper namespace="com.mbc.pet.snack.SnackService">
    
    <resultMap type="com.mbc.pet.user.UserDTO" id="petuserdto">
    <result property="user_id" column="user_id"/>
    <result property="user_login_id" column="user_login_id"/>
    <result property="password" column="password"/>
    <result property="name" column="name"/>
    <result property="phone" column="phone"/>
    <result property="address" column="address"/>
    <result property="profileimg" column="profileimg"/>
    <result property="rank" column="rank"/>
    <result property="user_role" column="user_role"/> 
    <result property="grape_count" column="grape_count"/> 
    </resultMap>
    
    <!-- 댓글 매핑 -->
  	<resultMap id="commentsMap" type="com.mbc.pet.community.CommentsDTO">
    <result property="com_id" column="com_id"/>
    <result property="user_id" column="user_id"/>
    <result property="user_login_id" column="user_login_id"/>
    <result property="post_id" column="post_id"/>
    <result property="com_com" column="com_com"/>
    <result property="parent_id" column="parent_id"/>
    <result property="depth" column="depth"/>
    <result property="profileimg" column="profileimg"/>
    <collection property="psdto" ofType="com.mbc.pet.user.UserDTO" resultMap="petuserdto"/>
    <collection property="sdto" ofType="com.mbc.pet.snack.SnackDTO" resultMap="snackMap"/>
  	</resultMap>
  	
  	<resultMap id="snackMap" type="com.mbc.pet.snack.SnackDTO">
	  <result property="snack_id" column="snack_id"/>
	  <result property="snack_title" column="snack_title"/>
	  <result property="snack_recipe" column="snack_recipe"/>
	  <result property="snack_image" column="snack_image"/>
	  <result property="snack_date" column="snack_date"/>
	  <result property="user_id" column="user_id"/>
	  <result property="user_login_id" column="user_login_id"/>
	</resultMap>
	  
 	<insert id="snack_save" parameterType="com.mbc.pet.snack.SnackDTO">
	    insert into snack
	    values (
	        snack_seq.nextval,
	        #{snack_title},
	        #{snack_recipe},
	        #{snack_image},
	        to_date(#{snack_date}, 'yyyy-MM-dd'),
	        #{user_id},
	        0
	    )
	</insert>

    <!-- 페이징 처리 -->
    <select id="total_recipe" resultType="int">
    	select count(*) from snack
    </select>
    
    <select id="snack_out" resultType="com.mbc.pet.snack.SnackDTO">
	    SELECT *
	    FROM (
	        SELECT a.*, ROWNUM AS rnum
	        FROM (
	            SELECT 
	                s.snack_id,
			        s.snack_title,
			        s.snack_recipe,
			        s.snack_image,
			        TO_CHAR(s.snack_date, 'yyyy-MM-dd') AS snack_date,
			        s.snack_readcnt,
			        s.user_id,
			        u.user_login_id,
			        (SELECT COUNT(*) FROM comments c WHERE c.snack_id = s.snack_id) AS comment_count,
			        (SELECT COUNT(*) FROM likes l WHERE l.snack_id = s.snack_id) AS like_count
			      FROM snack s
			      JOIN user1 u ON s.user_id = u.user_id
			      ORDER BY s.snack_id DESC
			    ) a
	        WHERE ROWNUM &lt;= #{end}
	    )
	    WHERE rnum &gt; #{start}
    </select>

	<select id="snack_detail" resultType="com.mbc.pet.snack.SnackDTO">
			    SELECT 
	        s.snack_id,
	        s.snack_title,
	        s.snack_recipe,
	        s.snack_image,
	        TO_CHAR(s.snack_date, 'yyyy-MM-dd') AS snack_date,
	        s.snack_readcnt,
	        s.user_id,
	        u.user_login_id
	    FROM snack s
	    JOIN user1 u ON s.user_id = u.user_id
	    WHERE s.snack_id = #{param1}
		</select>
	
	<select id="snack_update" resultType="com.mbc.pet.snack.SnackDTO">
		select snack_id,snack_title,snack_recipe,snack_image, to_char(snack_date,'yyyy-MM-dd')snack_date, user_id from snack where snack_id = #{param1}
	</select>
	
		
	<update id="snackupdate_save" parameterType="com.mbc.pet.snack.SnackDTO">
	    update snack
	    set snack_title = #{dto.snack_title},
	        snack_recipe = #{dto.snack_recipe},
	        snack_image = #{dto.snack_image},
	        snack_date = TO_DATE(#{dto.snack_date}, 'yyyy-MM-dd'),
	        user_id = #{dto.user_id}
	    where snack_id = #{dto.snack_id}
	</update>

	<select id="snackdelete_check" parameterType="int" resultType="com.mbc.pet.snack.SnackDTO">
		select snack_id, snack_title, snack_recipe, snack_image, to_char(snack_date,'yyyy-MM-dd')snack_date, user_id from snack where snack_id = #{param1} 
	</select>

	<delete id="delete_recipe" parameterType="int">
		delete from snack where snack_id = #{param1}
	</delete>
	
<!-- 조회수 증가 -->
<update id="readcnt">
 	 update snack set snack_readcnt = snack_readcnt + 1 where snack_id = #{param1}
</update>
  
<!-- 댓글 등록 -->
<insert id="comment_insert" parameterType="map">
  insert into comments
  (com_id, user_id, com_com, parent_id, depth, snack_id)
  values
  (
    comment_seq.nextval,
    #{user_id},
    #{com_com},
    #{parent_id},
    #{depth},
    #{snack_id}
  )
</insert>

<!-- 댓글 조회 -->
<select id="getCommentsBySnackId" parameterType="int" resultMap="commentsMap">
  select cm.com_id, u.user_id, u.user_login_id,
         cm.snack_id, cm.com_com, cm.parent_id, cm.depth, u.profileimg
  from comments cm
  join user1 u on cm.user_id = u.user_id
  where cm.snack_id = #{snack_id}
  order by
    case when cm.parent_id = 0 then cm.com_id else cm.parent_id end,
    cm.depth asc,
    cm.com_id asc
</select>

<!-- 좋아요 여부 확인 (snack용) -->
<select id="check_like" resultType="int">
  SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
  FROM likes
  WHERE user_id = #{user_id}
    AND snack_id = #{snack_id}
</select>

<!-- 좋아요 등록 (snack용) -->
<insert id="insert_like" parameterType="map">
  INSERT INTO likes (
    like_id,
    user_id,
    <if test="post_id != null">post_id,</if>
    user_login_id
    <if test="snack_id != null">, snack_id</if>
  ) VALUES (
    likesnum_seq.nextval,
    #{user_id},
    <if test="post_id != null">#{post_id},</if>
    #{user_login_id}
    <if test="snack_id != null">, #{snack_id}</if>
  )
</insert>

<!-- 좋아요 수 조회 -->
<select id="getLikeCount" parameterType="int" resultType="int">
    SELECT COUNT(*) FROM likes WHERE snack_id = #{snack_id}
</select>

<!-- 댓글 수 조회 -->
<select id="getSnackCommentCount" resultType="int">
  SELECT COUNT(*) FROM comments WHERE snack_id = #{param1}
</select>

<!-- 레시피 좋아요 수 조회 -->
<select id="getSnackLikeCount" resultType="int">
  SELECT COUNT(*) FROM likes WHERE snack_id = #{param1}
</select>

<!-- 간식 레시피 최신글 가져오기 -->
<select id="getsnackList" resultType="com.mbc.pet.snack.SnackDTO">
	select * from 
	( select s.snack_id, s.snack_title, s.snack_recipe, s.snack_image, to_char(s.snack_date,'yyyy-MM-dd')as snack_date, u.user_id, u.user_login_id
		from snack s
		join user1 u on u.user_id = s.user_id
		order by s.snack_date desc)
		where rownum &lt; = 10
</select>

<!-- 간식 레시피 랜덤 가져오기 -->
<select id="getSnackPreview" resultType="com.mbc.pet.snack.SnackDTO">
	  SELECT s.snack_id, s.snack_title, s.snack_recipe, s.snack_image,
	         TO_CHAR(s.snack_date, 'yyyy-MM-dd') AS snack_date,
	         s.user_id, u.user_login_id
	  FROM snack s
	  JOIN user1 u ON s.user_id = u.user_id
	  WHERE ROWNUM &lt;= 5
</select>

<!-- 간식 레시피 좋아요순 top10 → 커뮤니티 박스용 -->
<select id="getTopSnackByLikes" resultType="com.mbc.pet.snack.SnackDTO">
  SELECT *
  FROM (
    SELECT s.snack_id, s.snack_title, s.snack_recipe, s.snack_image,
           TO_CHAR(s.snack_date, 'yyyy-MM-dd') AS snack_date,
           s.user_id,
           (SELECT user_login_id FROM user1 u WHERE u.user_id = s.user_id) AS user_login_id,
           (SELECT COUNT(*) FROM likes l WHERE l.snack_id = s.snack_id) AS like_count
    FROM snack s
    ORDER BY (SELECT COUNT(*) FROM likes l WHERE l.snack_id = s.snack_id) DESC
  )
  WHERE ROWNUM &lt;= 10
</select>

<!-- 간식 레시피 댓글순 top10 → 오른쪽 박스용 (기본) -->
<select id="getTopSnackByComments" resultType="com.mbc.pet.snack.SnackDTO">
  SELECT *
  FROM (
    SELECT s.snack_id, s.snack_title, s.snack_recipe, s.snack_image,
           TO_CHAR(s.snack_date, 'yyyy-MM-dd') AS snack_date,
           s.user_id,
           (SELECT user_login_id FROM user1 u WHERE u.user_id = s.user_id) AS user_login_id,
           (SELECT COUNT(*) FROM comments c WHERE c.snack_id = s.snack_id) AS comment_count
    FROM snack s
    ORDER BY (SELECT COUNT(*) FROM comments c WHERE c.snack_id = s.snack_id) DESC
  )
  WHERE ROWNUM &lt;= 10
</select>

</mapper>